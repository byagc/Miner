unit uContentHTML;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  System.UITypes,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uContentBase, Vcl.StdCtrls,
  Vcl.ComCtrls, Vcl.Buttons, SynEdit, Vcl.ExtCtrls, Vcl.ClipBrd,
  SynEditHighlighter, SynHighlighterSQL, System.Actions,
  Vcl.ActnList,
  Vcl.ExtDlgs,
  ChromeTabs,
  ChromeTabsTypes,
  ChromeTabsUtils,
  ChromeTabsControls,
  ChromeTabsThreadTimer,
  ChromeTabsClasses, Vcl.OleCtrls, SHDocVw,
  uCEFChromiumWindow, uCEFChromium, uCEFWindowParent, uCEFInterfaces, uCEFApplication, uCEFTypes, uCEFConstants,
  uBase, uContentBrowser;

type
  TfrmContentHTML = class(TfrmContentBase)
    CEFWindowParent1: TCEFWindowParent;
    Chromium1: TChromium;
    procedure FormShow(Sender: TObject);
    procedure Chromium1AfterCreated(Sender: TObject; const browser: ICefBrowser);
    procedure Chromium1StatusMessage(Sender: TObject; const browser: ICefBrowser; const value: ustring);
    procedure Chromium1AddressChange(Sender: TObject; const browser: ICefBrowser; const frame: ICefFrame; const url: ustring);
    procedure Chromium1BeforeContextMenu(Sender: TObject; const browser: ICefBrowser; const frame: ICefFrame; const params: ICefContextMenuParams; const model: ICefMenuModel);
    procedure Chromium1ContextMenuCommand(Sender: TObject; const browser: ICefBrowser; const frame: ICefFrame; const params: ICefContextMenuParams; commandId: Integer; eventFlags: TCefEventFlags; out Result: Boolean);
    procedure Chromium1FullScreenModeChange(Sender: TObject; const browser: ICefBrowser; fullscreen: Boolean);
    procedure Chromium1KeyEvent(Sender: TObject; const browser: ICefBrowser; const event: PCefKeyEvent; osEvent: PMsg; out Result: Boolean);
    procedure Chromium1PreKeyEvent(Sender: TObject; const browser: ICefBrowser; const event: PCefKeyEvent; osEvent: PMsg; out isKeyboardShortcut, Result: Boolean);
    procedure Chromium1ProcessMessageReceived(Sender: TObject; const browser: ICefBrowser; sourceProcess: TCefProcessId; const message: ICefProcessMessage; out Result: Boolean);
    procedure Chromium1TextResultAvailable(Sender: TObject; const aText: string);
    procedure Chromium1TitleChange(Sender: TObject; const browser: ICefBrowser; const title: ustring);
    procedure Chromium1BeforePopup(Sender: TObject; const browser: ICefBrowser; const frame: ICefFrame; const targetUrl, targetFrameName: ustring; targetDisposition: TCefWindowOpenDisposition; userGesture: Boolean; var popupFeatures: TCefPopupFeatures; var windowInfo: TCefWindowInfo;
      var client: ICefClient; var settings: TCefBrowserSettings; var noJavascriptAccess: Boolean; out Result: Boolean);
  private
    FHomepage: string;
    procedure BrowserCreatedMsg(var aMessage: TMessage); message MINIBROWSER_CREATED;
    procedure BrowserRefresh(var aMessage: TMessage); message MINIBROWSER_REFRESH;
    // procedure ShowDevToolsMsg(var aMessage: TMessage); message MINIBROWSER_SHOWDEVTOOLS;
    // procedure HideDevToolsMsg(var aMessage: TMessage); message MINIBROWSER_HIDEDEVTOOLS;
    // procedure CopyHTMLMsg(var aMessage: TMessage); message MINIBROWSER_COPYHTML;
    // procedure VisitDOMMsg(var aMessage: TMessage); message MINIBROWSER_VISITDOM;

  public
    property Homepage: string read FHomepage write FHomepage;

  end;

var
  frmContentHTML: TfrmContentHTML;

implementation

uses
  // ceflib,
  uDataModule, uMain, uCEFProcessMessage, uCEFSchemeHandlerFactory, uMinerScheme;

{$R *.dfm}

procedure TfrmContentHTML.Chromium1AddressChange(Sender: TObject; const browser: ICefBrowser; const frame: ICefFrame; const url: ustring);
begin
  inherited;
  // AddURL(url);
  // frmMain.Caption := url;
end;

procedure TfrmContentHTML.Chromium1AfterCreated(Sender: TObject; const browser: ICefBrowser);
begin
  inherited;
  PostMessage(Handle, MINIBROWSER_CREATED, 0, 0);
end;

procedure TfrmContentHTML.Chromium1BeforeContextMenu(Sender: TObject; const browser: ICefBrowser; const frame: ICefFrame; const params: ICefContextMenuParams; const model: ICefMenuModel);
begin
  inherited;
  model.AddSeparator;
  model.AddItem(MINIBROWSER_CONTEXTMENU_SHOWJSALERT, 'Show JS Alert');
  model.AddItem(MINIBROWSER_CONTEXTMENU_SETJSEVENT, 'Set mouseover event');
  model.AddItem(MINIBROWSER_CONTEXTMENU_COPYHTML, 'Copy HTML to clipboard');
  model.AddItem(MINIBROWSER_CONTEXTMENU_VISITDOM, 'Visit DOM');
  model.AddItem(MINIBROWSER_CONTEXTMENU_JSWRITEDOC, 'Modify HTML document');
  model.AddItem(MINIBROWSER_CONTEXTMENU_JSPRINTDOC, 'Print using Javascript');
  model.AddItem(MINIBROWSER_CONTEXTMENU_REGSCHEME, 'Register scheme');
  model.AddItem(MINIBROWSER_CONTEXTMENU_CLEARFACT, 'Clear schemes');
  model.AddSeparator;
  model.AddItem(MINIBROWSER_CONTEXTMENU_REFRESH, 'Atualizar');

end;

procedure TfrmContentHTML.Chromium1BeforePopup(Sender: TObject; const browser: ICefBrowser; const frame: ICefFrame; const targetUrl, targetFrameName: ustring; targetDisposition: TCefWindowOpenDisposition; userGesture: Boolean; var popupFeatures: TCefPopupFeatures; var windowInfo: TCefWindowInfo;
  var client: ICefClient; var settings: TCefBrowserSettings; var noJavascriptAccess: Boolean; out Result: Boolean);
begin
  inherited;
  browser.StopLoad;
  Result := true;
  frmMain.OpenPopup := targetUrl;
  frmMain.Timer1.Enabled := true;
end;

procedure TfrmContentHTML.Chromium1ContextMenuCommand(Sender: TObject; const browser: ICefBrowser; const frame: ICefFrame; const params: ICefContextMenuParams; commandId: Integer; eventFlags: TCefEventFlags; out Result: Boolean);
var
  TempParam: WParam;
  TempFactory: ICefSchemeHandlerFactory;
begin
  inherited;
  Result := False;

  case commandId of
    MINIBROWSER_CONTEXTMENU_HIDEDEVTOOLS:
      PostMessage(Handle, MINIBROWSER_HIDEDEVTOOLS, 0, 0);

    MINIBROWSER_CONTEXTMENU_SHOWDEVTOOLS:
      begin
        TempParam := ((params.XCoord and $FFFF) shl 16) or (params.YCoord and $FFFF);
        PostMessage(Handle, MINIBROWSER_SHOWDEVTOOLS, TempParam, 0);
      end;

    MINIBROWSER_CONTEXTMENU_SHOWJSALERT:
      if (browser <> nil) and (browser.MainFrame <> nil) then
        browser.MainFrame.ExecuteJavaScript('alert(''JavaScript execute works!'');', 'about:blank', 0);

    MINIBROWSER_CONTEXTMENU_SETJSEVENT:
      if (browser <> nil) and (browser.MainFrame <> nil) then
        browser.MainFrame.ExecuteJavaScript('document.body.addEventListener("mouseover", function(evt){' + 'function getpath(n){' + 'var ret = "<" + n.nodeName + ">";' + 'if (n.parentNode){return getpath(n.parentNode) + ret} else ' + 'return ret' + '};' +
          'myextension.mouseover(getpath(evt.target))}' + ')', 'about:blank', 0);

    MINIBROWSER_CONTEXTMENU_COPYHTML:
      PostMessage(Handle, MINIBROWSER_COPYHTML, 0, 0);

    MINIBROWSER_CONTEXTMENU_VISITDOM:
      PostMessage(Handle, MINIBROWSER_VISITDOM, 0, 0);

    MINIBROWSER_CONTEXTMENU_JSWRITEDOC:
      if (browser <> nil) and (browser.MainFrame <> nil) then
        browser.MainFrame.ExecuteJavaScript('var css = ' + chr(39) + '@page {size: A4; margin: 0;} @media print {html, body {width: 210mm; height: 297mm;}}' + chr(39) + '; ' + 'var style = document.createElement(' + chr(39) + 'style' + chr(39) + '); ' + 'style.type = ' + chr(39) + 'text/css' +
          chr(39) + '; ' + 'style.appendChild(document.createTextNode(css)); ' + 'document.head.appendChild(style);', 'about:blank', 0);

    MINIBROWSER_CONTEXTMENU_JSPRINTDOC:
      if (browser <> nil) and (browser.MainFrame <> nil) then
        browser.MainFrame.ExecuteJavaScript('window.print();', 'about:blank', 0);

    MINIBROWSER_CONTEXTMENU_REGSCHEME:
      if (browser <> nil) and (browser.host <> nil) and (browser.host.RequestContext <> nil) then
      begin
        // You can register the Scheme Handler Factory in the DPR file or later, for example in a context menu command.
        TempFactory := TCefSchemeHandlerFactoryOwn.Create(TMinerScheme);
        if not(browser.host.RequestContext.RegisterSchemeHandlerFactory('hello', '', TempFactory)) then
          MessageDlg('RegisterSchemeHandlerFactory error !', mtError, [mbOk], 0);
      end;

    MINIBROWSER_CONTEXTMENU_REFRESH:
      if (browser <> nil) and (browser.host <> nil) and (browser.host.RequestContext <> nil) then
      begin
        // browser.Reload;
        PostMessage(Handle, MINIBROWSER_REFRESH, TempParam, 0);
      end;
    MINIBROWSER_CONTEXTMENU_CLEARFACT:
      if (browser <> nil) and (browser.host <> nil) and (browser.host.RequestContext <> nil) then
      begin
        if not(browser.host.RequestContext.ClearSchemeHandlerFactories) then
          MessageDlg('ClearSchemeHandlerFactories error !', mtError, [mbOk], 0);
      end;

  end;

end;

procedure TfrmContentHTML.Chromium1FullScreenModeChange(Sender: TObject; const browser: ICefBrowser; fullscreen: Boolean);
begin
  inherited;
  if fullscreen then
  begin
    if (WindowState = wsMaximized) then
      WindowState := wsNormal;
    BorderIcons := [];
    BorderStyle := bsNone;
    WindowState := wsMaximized;
  end
  else
  begin
    BorderIcons := [biSystemMenu, biMinimize, biMaximize];
    BorderStyle := bsSizeable;
    WindowState := wsNormal;
  end;
end;

procedure TfrmContentHTML.Chromium1KeyEvent(Sender: TObject; const browser: ICefBrowser; const event: PCefKeyEvent; osEvent: PMsg; out Result: Boolean);
var
  TempMsg: TMsg;
begin
  inherited;
  Result := False;
  if (event <> nil) and (osEvent <> nil) then
    case osEvent.message of
      WM_KEYUP:
        begin
          TempMsg := osEvent^;
          frmMain.HandleKeyUp(TempMsg, Result);
        end;

      WM_KEYDOWN:
        begin
          TempMsg := osEvent^;
          frmMain.HandleKeyDown(TempMsg, Result);
        end;
    end;
end;

procedure TfrmContentHTML.Chromium1PreKeyEvent(Sender: TObject; const browser: ICefBrowser; const event: PCefKeyEvent; osEvent: PMsg; out isKeyboardShortcut, Result: Boolean);
begin
  inherited;
  Result := False;
  if (event <> nil) and (event.kind in [KEYEVENT_KEYDOWN, KEYEVENT_KEYUP]) and
    ( (event.windows_key_code = VK_F12) or  (event.windows_key_code = VK_F5) ) then
    isKeyboardShortcut := True;
end;

procedure TfrmContentHTML.Chromium1ProcessMessageReceived(Sender: TObject; const browser: ICefBrowser; sourceProcess: TCefProcessId; const message: ICefProcessMessage; out Result: Boolean);
begin
  inherited;
  if (message <> nil) and (message.Name = 'mouseover') and (message.ArgumentList <> nil) then
  begin
    // Message received from the extension
    Result := true;
  end
  else
    Result := False;

end;

procedure TfrmContentHTML.Chromium1StatusMessage(Sender: TObject; const browser: ICefBrowser; const value: ustring);
begin
  inherited;
  stat.Panels[0].Text := value;
end;

procedure TfrmContentHTML.Chromium1TextResultAvailable(Sender: TObject; const aText: string);
begin
  inherited;
  clipboard.AsText := aText;
end;

procedure TfrmContentHTML.Chromium1TitleChange(Sender: TObject; const browser: ICefBrowser; const title: ustring);
begin
  inherited;
  if (title <> '') then
    Caption := title
  else
    Caption := 'Home';

end;

procedure TfrmContentHTML.FormShow(Sender: TObject);
begin
  inherited;
  Chromium1.CreateBrowser(CEFWindowParent1, '');
end;

procedure TfrmContentHTML.BrowserCreatedMsg(var aMessage: TMessage);
begin
  Chromium1.LoadURL(Homepage);

end;

procedure TfrmContentHTML.BrowserRefresh(var aMessage: TMessage);
begin
  frmMain.Memo1.Lines.Add('HTML');
  if Homepage <> '' then
  begin
    Chromium1.Reload;
  end;
end;

end.
