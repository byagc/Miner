unit uConfig;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uContentBase, System.Actions, System.Types, System.IOUtils,
  Vcl.ActnList, Vcl.StdCtrls, Vcl.ComCtrls, Vcl.Buttons, uCEFWindowParent,
  Vcl.ExtCtrls, Vcl.Shell.ShellCtrls;

type
  TfrmSettings = class(TfrmContentBase)
    Button1: TButton;
    PageControl1: TPageControl;
    tsBrowser: TTabSheet;
    Splitter5: TSplitter;
    NavControlPnl: TPanel;
    PanelMainLeft: TPanel;
    PanelLeftTop: TPanel;
    SpeedButton2: TSpeedButton;
    Button2: TButton;
    PanelContainer: TPanel;
    Panel7: TPanel;
    tsMyStuff: TTabSheet;
    Splitter2: TSplitter;
    ListView1: TListView;
    Panel1: TPanel;
    btnADD: TButton;
    btnDelete: TButton;
    Button3: TButton;
    Panel2: TPanel;
    Splitter3: TSplitter;
    tvDirectory: TTreeView;
    Panel3: TPanel;
    btnRefreshHardDrivers: TButton;
    procedure Button1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure btnRefreshHardDriversClick(Sender: TObject);
    procedure tvDirectoryChange(Sender: TObject; Node: TTreeNode);
  private
    procedure OnInputQuery_Close(const AValues: array of string);
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmSettings: TfrmSettings;

implementation

{$R *.dfm}

uses uMain;

function NodeAsPath(Node: TTreeNode): string;
var
  anode: TTreeNode;
begin
  Result := '';

  anode := Node;
  while anode <> nil do
  begin
    if Result <> '' then
      Result := anode.Text + '\' + Result
    else
      Result := anode.Text;

    anode := anode.Parent;
  end;
end;

function PathToNode(const Path: string; Tree: TTreeView): TTreeNode;
begin
  Result := nil;

  if Tree.Items.Count > 0 then
  begin
    Result := Tree.Items[0];
    while (Result <> nil) and (AnsiCompareText(NodeAsPath(Result), Path) <> 0) do
      Result := Result.GetNext;
  end;
end;

procedure TfrmSettings.btnDeleteClick(Sender: TObject);
begin
  inherited;
  tvDirectory.SaveToFile(frmMain.SHARED_DRIVE_DIR + 'data\struct.dat');
end;

procedure TreeAddFolderPath(const Path: string; Tree: TTreeView);
var
  anode: TTreeNode;
  s, buffer, sPath: string;
  i: Integer;
  Obj: TMyData;
begin
  buffer := ExcludeTrailingBackSlash(Path);
  if (buffer <> '') and (buffer[1] = '\') then
    Delete(buffer, 1, 1);

  if buffer <> '' then
  begin
    s := buffer;
    anode := PathToNode(s, Tree);
    while (s <> '') and (ExtractFilePath(s) <> s) and (anode = nil) do
    begin
      s := ExcludeTrailingBackSlash(ExtractFilePath(s));
      anode := PathToNode(s, Tree);
    end;

    if anode <> nil then
      Delete(buffer, 1, Length(s));

    if (buffer <> '') and (buffer[1] = '\') then
      Delete(buffer, 1, 1);

    if (buffer <> '') and (buffer[Length(buffer)] <> '\') then
      buffer := buffer + '\';

    sPath := buffer;

    while buffer <> '' do
    begin
      i := Pos('\', buffer);
      if i > 1 then
      begin
        s := Copy(buffer, 1, i - 1);
        Delete(buffer, 1, i);

        if anode = nil then
        begin
          Obj := TMyData.Create(nil);
          try
            Obj.Dir := 'Nil ' + sPath;
            anode := Tree.Items.AddObject(nil, s, Obj);

            // anode := Tree.Items.Add(nil, s);

          except

          end;
        end
        else
        begin
          Obj := TMyData.Create(nil);
          try
            Obj.Dir := Path;
            anode := Tree.Items.AddChildObject(anode, s, Obj);
            TMyData(anode.Data).Dir := NodeAsPath(anode);
            // anode.Data
            // TMyData(anode.Data).Dir := 'save this String'; // anode.Data
            // anode := Tree.Items.AddChild(anode, s);
          except

          end;
        end
      end;
    end;
  end;

end;

procedure TfrmSettings.btnRefreshHardDriversClick(Sender: TObject);
var
  oc, teste: TStringDynArray;
  s: string;
begin
  inherited;
  // teste := TDirectory.GetFileSystemEntries('D:\soft\');
  oc := TDirectory.GetFiles('D:\soft\', '*.*', TSearchOption.soAllDirectories);
  tvDirectory.Items.BeginUpdate;
  btnRefreshHardDrivers.Enabled := False;
  tvDirectory.Items.Clear;
  try
    for s in oc do
    begin
      OnInputQuery_Close(s);
      // ['Item: ' + FormatDateTime('dd/MM/yy hh:mm', Now)]
      tvDirectory.Items.BeginUpdate;

      TreeAddFolderPath(s, tvDirectory);
      Application.ProcessMessages;
    end;
  finally
    btnRefreshHardDrivers.Enabled := True;
    tvDirectory.Items.EndUpdate;
  end;

  // oc := TDirectory.GetDirectories('D:\');
  // oc := TDirectory.
  // tvDirectory.Items.BeginUpdate;
  // try
  // for s in oc do
  // tvDirectory.Items.Add(Nil, s);
  // finally
  // tvDirectory.Items.EndUpdate;
  // end;

  // tvDirectory.Items.Add( TDirectory.GetFiles('C:\', '*.dll', TSearchOption.soAllDirectories));


end;

procedure TfrmSettings.Button1Click(Sender: TObject);
begin
  inherited;
  // DataModule1.FDQuery1.SQL.Text := 'select * from tab where code = :Code';
  // DataModule1.FDQuery1.ParamByName('code').AsString := '123';
  // DataModule1.FDQuery1.Open;
  // DataModule1.FDQuery1.DisableControls;

  {
  with DataModule1.FDQuery1 do
  begin
    DisableControls;
    // sql.Clear;
    // sql.Text := 'SELECT * FROM `Users` WHERE `Situacao` = "A"';
    Open();
    if RecordCount > 0 then
    begin
      while not Eof do
      begin
        TreeAddFolderPath(FieldByName('items_path').AsString, tvDirectory);
        Application.ProcessMessages;
        // cbAtendente.Items.Add(FieldByName('LoginName').AsString);
        Next;
      end;
    end;
    EnableControls;

  end;
  }
end;

procedure TfrmSettings.OnInputQuery_Close(const AValues: array of string);
var
  TaskName: String;
begin
  TaskName := string.Empty;

  TaskName := AValues[0];
  try
    if (TaskName.Trim <> '') then
    begin
{
      DataModule1.FDQueryInsert.ParamByName('sPath').AsString := TaskName;
      DataModule1.FDQueryInsert.ExecSQL();
      DataModule1.FDQuery1.Close();
      DataModule1.FDQuery1.Open;
      btnDelete.Visible := ListView1.Selected <> nil;
}
    end;
  except
    on e: Exception do
    begin
      //StatusBar1.SimpleText := e.message;
      // ShowMessage(e.message);
    end;
  end;
end;




procedure TfrmSettings.SpeedButton2Click(Sender: TObject);
begin
  inherited;
  //SystemBrowser.LoadURL(SHARED_DRIVE_DIR + 'html/dashboard.html');

end;

procedure TfrmSettings.tvDirectoryChange(Sender: TObject;
  Node: TTreeNode);
var
  FChild: TTreeNode;
begin
  inherited;
  if Assigned(tvDirectory.Selected.Data) then
  begin
    Self.caption := TMyData(tvDirectory.Selected.Data).Dir;
    begin
      FChild := Node.GetFirstChild;
      ListView1.Clear;
      while FChild <> nil do
      begin
        ListView1.Items.Add.caption := FChild.Text;
        FChild := Node.GetNextChild(FChild);
      end;
    end;
  end;

end;

end.
